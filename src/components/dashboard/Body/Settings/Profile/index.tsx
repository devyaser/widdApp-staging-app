import { ConfirmationModal } from "../../../../../components/modals";
import Button from "../../../../../components/common/Button";
import Image from "next/image";
import React, { useRef, useState } from "react";
import classNames from "classnames";
import { directUpload, getPreSignedUrl } from "services/upload.services";
import { setUserDetails, useUserSelector } from "store/features/user/userSlice";
import { updateUserById } from "services/user.services";
import { Formik, Form } from "formik";
import FormField from "@/components/common/FormField";
import * as Yup from "yup";
import { toast } from "react-toastify";
import { refreshUserAsync } from "store/features/user/userSlice";
import { useAppDispatch } from "store/store";

const UserUpdateSchema = Yup.object().shape({
  displayName: Yup.string().required("Display name is required"),
  userName: Yup.string().required("Username is required"),
});

const Profile = () => {
  const [confirmationModal, setConfirmationModal] = useState(false);
  const [uploadImageError, setUploadImageError] = useState(false);
  const [uploadImageLoader, setUploadImageLoader] = useState(false);
  const [updateUserNameAndDisplayNameLoader, setUpdateUserNameAndDisplayNameLoader] =
    useState<boolean>(false);
  const btnRef = useRef<any>(null);
  const { user } = useUserSelector();
  const dispatch = useAppDispatch();

  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUploadImageLoader(true);
    setUploadImageError(false);
    if (e.target.files) {
      const uploadedFile = e.target.files?.[0];
      if (uploadedFile?.size > 1 * 1000 * 1024 * 10) {
        setUploadImageError(true);
        return false;
      }
      if (uploadedFile) {
        getPreSignedUrl(uploadedFile.name)
          .then((res) => {
            const singedUrl = res?.data?.data?.signedUrl;
            const objectUrl = res?.data?.data?.objectUrl;

            directUpload(singedUrl, uploadedFile as File)
              .then((res) => {
                updateUserById(user?._id as string, { profileImageUrl: objectUrl })
                  .then((res) => {
                    dispatch(setUserDetails(res?.data?.data));
                    setUploadImageLoader(false);
                  })
                  .catch((err) => {
                    toast.error(err?.response?.data?.message);
                    setUploadImageLoader(false);
                  });
              })
              .catch((err) => {
                toast.error(err?.response?.data?.message);
                setUploadImageLoader(false);
              });
          })
          .catch((err) => {
            toast.error(err?.response?.data?.message);
            setUploadImageLoader(false);
          });
      }
    }
  };

  const handleConfirm = () => {
    updateUserById(user?._id as string, { isDisabled: true });
    setConfirmationModal(false);
  };

  const handleUpdateUserNameAndDisplayName = (values: any) => {
    setUpdateUserNameAndDisplayNameLoader(true);
    const newValues = { ...values };
    if (newValues.userName.trim() === user?.userName) {
      delete newValues.userName;
    }

    if (newValues.displayName.trim() === user?.displayName) {
      delete newValues.displayName;
    }

    updateUserById(user?._id as string, newValues)
      .then((res) => {
        toast.success(res?.data?.message);
        dispatch(setUserDetails(res?.data?.data));
        setUpdateUserNameAndDisplayNameLoader(false);
      })
      .catch((err) => {
        toast.error(err?.response?.data?.message);
        setUpdateUserNameAndDisplayNameLoader(false);
      });
  };

  return (
    <div>
      <div className="pb-2">Profile Picture</div>
      <div className="bg-custom-lightgrayone p-4 rounded-md flex items-center gap-4">
        <div className="md:pl-6">
          <Image
            src={user?.profileImageUrl || "/images/account_circle.png"}
            width={60}
            height={60}
            alt="profile-alt"
            className="rounded-full object-cover"
          />
        </div>
        <div className="flex flex-col md:flex-row md:items-center gap-2 md:gap-4">
          <Button
            variant="dark"
            onClick={() => btnRef?.current?.click()}
            isLoading={uploadImageLoader}
          >
            {user?.profileImageUrl ? "Update" : "Add"} Profile Picture
          </Button>
          <input
            ref={btnRef}
            type="file"
            accept=".png, .jpg, .jpeg"
            className="hidden"
            onChange={handleImage}
          />
          <div className={classNames("text-xs", uploadImageError && "text-red-600")}>
            Use JPEG, PNG or GIF and can’t exceed 10MB. (can be autogenerated)
          </div>
        </div>
      </div>

      <div className="pt-4">Profile Settings</div>
      <div className="text-xs pb-2">Change identifying details for your account</div>

      <div className="bg-custom-lightgrayone p-4 rounded-md flex items-center gap-4">
        <Formik
          initialValues={{
            userName: user?.userName,
            displayName: user?.displayName,
          }}
          validationSchema={UserUpdateSchema}
          onSubmit={(values: any) => handleUpdateUserNameAndDisplayName(values)}
          className="w-full"
        >
          {({
            errors,
            touched,
            values,
            setFieldValue,
          }: {
            errors: any;
            touched: any;
            values: any;
            setFieldValue: any;
          }) => (
            <div className="w-full">
              <Form>
                <div className="flex flex-col gap-1 md:items-baseline md:flex-row ">
                  <label className="flex-[0.4] text-[13px] font-bold">Username</label>
                  <div className="flex flex-col flex-1">
                    <FormField
                      type="text"
                      name="userName"
                      placeholder="Username"
                      errors={errors}
                      touched={touched}
                      className="w-full outline-none border border-white text-[13px] text-black bg-custom-darkgrayfour px-3 rounded-[5px] p-1 h-[32px]"
                      isShrink
                    />
                    <div className="text-xs pt-1">You may update your username</div>
                  </div>
                </div>
                <div className="flex flex-col gap-1 md:items-baseline md:flex-row mt-6">
                  <label className="flex-[0.4] text-[13px] font-bold">Display Name</label>
                  <div className="flex flex-col flex-1">
                    <FormField
                      type="text"
                      name="displayName"
                      placeholder="Display Name"
                      errors={errors}
                      touched={touched}
                      className="w-full outline-none border border-white text-[13px] text-black bg-custom-darkgrayfour px-3 rounded-[5px] p-1 h-[32px]"
                      isShrink
                    />
                    <div className="text-xs pt-1">Customize capitalization for your username</div>
                  </div>
                </div>

                <div className="mt-5 flex justify-end items-center">
                  <Button
                    type="submit"
                    variant="dark"
                    isLoading={updateUserNameAndDisplayNameLoader}
                  >
                    Save Changes
                  </Button>
                </div>
              </Form>
            </div>
          )}
        </Formik>
      </div>
      <div className="pb-2 pt-4">Disabling Account</div>
      <div className="bg-custom-lightgrayone p-4 rounded-md flex items-center justify-between mb-2">
        <div className="text-xs">
          Disable Your Account - you can’t delete account for platform records
        </div>
        <Button variant="dark" onClick={() => setConfirmationModal(true)}>
          Disable Account
        </Button>
      </div>

      <ConfirmationModal
        text="Are you sure you want to disable your account?"
        open={confirmationModal}
        handleCancel={() => setConfirmationModal(false)}
        handleConfirm={handleConfirm}
      />
    </div>
  );
};

export default Profile;
